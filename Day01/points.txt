Python
-------
1. Open source technology

2. Readmade modules(libraries) for any purpose
	
	a. desktop app 	-	TKinter
	
	b. Web app		-	Flask, Django (REST API, MVC, ORM)

	c. Mobile app	-	qpython 3L, kivy

	d. Data Engineering
						- Data Science
							a. Data Analytics
							b. ML
							c. AI

	e. ETL tools		-	Petl
	
	f. Spark, Hdoop	->	Pyspark

	g. Testing		-> Robot Framework, Unit Testing, Selenium

	h. Automation	-> paramiko, 


Flavours of Python
------------------
1. Cpython		-	Currently using

2. Jython			-	python code to java

3. Iron Python 	-	Dotnet	 libraries


Python
------
python 3.11.x latest version (www.python.org)

versions
--------
2.x and 3.x

syntax
------
print "hello"		- 2.x

print("hello")		- 3.x


import os

os.system()
os.cpu_count()
os.chdir()

from os import getcwd

getcwd()

pip install numpy			-> connects to the python repository -> cache the .whl file

pip install pandas

Need to have

1. internet connection
2. installation rights (not necessary if working on virtual environment)


import os

Editors
-------

Pycharm CE - https://www.jetbrains.com/pycharm/download/#section=windows

VS code CE 

Eclipse

Sublime text

jupyter notebook

Komodo

Notepad++

IDLE		-	Integrated development environment


Python 3.x
----------
1. SDK	-	necessary libraries to execute a python file

2. Shell - Interactive Environment

3. IDLE - Shell in UI


Python is scripting tool

C and C++ are programming languages


Script											Program
-------										---------
1. interpreted								1. compiled

2. Data types are loosly coupled		2. tightly coupled

Implicit Decleration						Explicit Decleration

a = 10											int a;
												a = 10
a = "hello"									a = 50

a = True


Two Operators that are overloaded
----------------------------------
+	-	addition and concatenation

*	-	multiplication and print string n number of times


2.x
---
Numbers
-------
	a. integer
	b. long
	c. float
	d. complex

long
----
287298710298120109L

In 3.x long data type is deprecated but its properties still exist


reload function from imp module

from imp import reload

PIP 8 Coding Rules
-------------------

1. single line strings are enclosed in " " or ' '

	"this is a string"

	'this is a string"

2. multiline string are enclosed in """ """or ''' '''


"""
	this is the first line
	this is the second line
	this is the third line
"""

'''
	this is the first line
	this is the second line
	this is the third line
'''

Comments in python
------------------
# is used to write comments in python - single line commment


doc_string	- written on top of the functions

"this is a string"

-----------------------------------
def fun():

	" this is fun "

------------------------------------


#! - Shebang
-------------

this is used to get the location of python executable

#! /usr/bin/


Paranthesis - { }
-----------------
we don't use paranthesis in 

	a. if conditions		-	if i > 10 {} else {}
	b. for loops				-  for () {}
	c. functions				-	function fun() { }


python uses indentation

def fun():
	
	print("Hello World")		# function code

	for i in range(1, 10):
	
		if i % 2 == 0:			# for loop code
	
			print(i)				# if condition code


print("hai")		# __main__ module



Data Types
----------
1.  Numbers
	a. integer
	b. float
	c. complex

2. Strings

3. Boolean

Operators
---------
Arithmetic
Augmentor
Comparison
Logical
Bitwise
Ternary


Bitwise Operators
------------------
OR
--
5 - 101
3 - 011
    ---
	 111   - 2 ** 2 + 2 ** 1 + 2 ** 0 => 1 + 2 + 4 => 7
    ---	

AND
---
5 = 101
3 = 011
    ---
    001	= 1
    ---

XOR
---
5 = 101
3 = 011
    ---
    110 	= 6
    ---

<<
---
5 << 1 = 101 => 1010 => 0 + 2 + 0 + 8 => 10
8 << 1 = 1000 => 10000 => 16

5 << 2 = 101 => 10100 => 16 + 4 = 20

>>
---
16 >> 1 = 10000 => 1000 = 8
5 >> 1 = 101 = 10 = 2

Control Structures and Loops
----------------------------

Control Structures
-------------------
1. if conditions

2. Select Case 


input
-----
string = input(prompt)


Loops
-----
1. for loop
2. while loop

for loop - similar to foreach loop - it depends on a collection

collection of objects => collection of numbers generated by range function

range(1, 10, 1)		=>	 1, 2, 3....9

range(1, 11)			=>	 1, 2, 3....10

range(1, 20, 2) 	=>	 1, 3, 5....19

range(10, 0, -1) 	=>  10, 9, 8....1


Print
-----
print(data, sep=, end="\n")


continue

break

else

Write a code to generate


1 2 3 4 5
 1 2 3 4
  1 2 3
   1 2
    1
   2 1
  3 2 1
 4 3 2 1
5 4 3 2 1


prime numbers between 150 and 50 and also print the count of it



Data types
----------

Strings 
-------

single line string are enclosed in  " " or  ' '

multiple line string are enclose in  """ """ or  '''  '''

STRINGS IN PYTHON ARE IMMUTABLE
-------------------------------


class Player:

	def __init__(self, name):				# constructor
		self.name = name

	
	# getter method
	def get_details(self):
		print(f"Name is {self.name}")
	
	# setter method
	def change_name(self, new_name):
		self.name = new_name



ply1 = Player("Sachin")

ply1.get_details()

ply1.change_name("Sachin Tendulkar")


immutable object will not have setter method


String Manipulation functions
-----------------------------
find, replace, split, join, maketrans, translate, format












































